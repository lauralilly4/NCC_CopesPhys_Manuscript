geom_point(aes(x = Year, y = PSI, color = factor(Comp_yr), shape = factor(Comp_yr))) +
ylim(c(0,100)) +
scale_color_manual(name = 'Year',
labels = yrssub,
values = psicols2) +
scale_shape_manual(name = 'Year',
labels = yrssub,
values = psisyms2) +
scale_x_continuous(breaks = seq(1996,2020,1),
labels = c("1996","","","",
"2000","","","",
"2004","","","",
"2008","","","",
"2012","","","",
"2016","","","","2020")) +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "grey50", fill = NA, size = 0.4),
legend.key=element_blank()) +
guides(color = guide_legend(ncol = 7),
shape = guide_legend(ncol = 7))
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P5_2_BST_PSI.png", plot = plt05_1, width = 2000, height = 1600, units = 'px')
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P5_2_BST_PSI.png", plot = plt05_2, width = 2000, height = 1600, units = 'px')
# ### PLOT 3 - SUMMER PSI
# First, melt DF down to single columns (from square matrix)
sum_psi_mlt <- as_tibble(melt(as.matrix(sum_psi), id = colnames(as.matrix(sum_psi))))
colnames(sum_psi_mlt) <- c("Year", "Comp_yr", "PSI")
sum_psi_srt <- sum_psi_mlt |>
arrange(Year) |>
mutate(PSI = replace(PSI, PSI == 100, 0))
plt05_3 <- ggplot(data = sum_psi_srt, aes(x = Year, y = PSI)) +  # For some reason, have to plot the GAM first...
geom_point(aes(x = Year, y = PSI, color = factor(Comp_yr), shape = factor(Comp_yr))) +
ylim(c(0,100)) +
scale_color_manual(name = 'Year',
labels = yrssub,
values = psicols2) +
scale_shape_manual(name = 'Year',
labels = yrssub,
values = psisyms2) +
scale_x_continuous(breaks = seq(1996,2020,1),
labels = c("1996","","","",
"2000","","","",
"2004","","","",
"2008","","","",
"2012","","","",
"2016","","","","2020")) +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "grey50", fill = NA, size = 0.4),
legend.key=element_blank()) +
guides(color = guide_legend(ncol = 7),
shape = guide_legend(ncol = 7))
plt05_3
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P5_3_Sum_PSI.png", plot = plt05_3, width = 2000, height = 1600, units = 'px')
sumdts <- bstdts+((dtinv+2)*7)
# ###  Step 2: INTERVAL COMMUNITIES  ###
# Get Year of each date
bstyrs <- format(bstdts,format="%Y")
# Get rows of each community
# WINTER
win_comm <- data.frame(matrix(nrow=length(windts),ncol=ncol(mstrdata)))
win_diffs <- data.frame(matrix(nrow=length(windts),ncol = 1))
for(p in 1:length(windts)){
did = which.min(abs(dtmstr-windts[p]))
dval = dtmstr[did]-windts[p]
# If the closest matching date is empty (no samples), move to next closest
#     date, but *farther* away from BST (i.e., more in winter)
if(sum(is.na(mstrdata[did,]))==ncol(mstrdata)){
did = did-1
# If that one is also empty, try sample on other side of original winter
#     date (closer to BST)
if(sum(is.na(mstrdata[did,]))==ncol(mstrdata)){
did = did+2
}
}
win_comm[p,] = mstrdata[did,]
}
colnames(win_comm) <- colnames(mstrdata)
rownames(win_comm) <- bstyrs
# BST
bst_comm <- data.frame(matrix(nrow=length(bstdts),ncol=ncol(mstrdata)))
for(p in 1:length(bstdts)){
did = which.min(abs(dtmstr-bstdts[p]))
# This one is pretty straightforward: If the BST sample is empty... well,
#     so be it (but it shouldn't be... because the BST is sort of necessarily
#     defined by a present sample)
bst_comm[p,] = mstrdata[did,]
}
colnames(bst_comm) <- colnames(mstrdata)
rownames(bst_comm) <- bstyrs
# SUMMER
sum_comm <- data.frame(matrix(nrow=length(sumdts),ncol=ncol(mstrdata)))
for(p in 1:length(sumdts)){
did = which.min(abs(dtmstr-sumdts[p]))
dval = dtmstr[did]-sumdts[p]
# If the closest matching date is empty (no samples), move to next closest
#     date, but *farther* away from BST (i.e., farther ahead in *summer*)
if(sum(is.na(mstrdata[did,]))==ncol(mstrdata)){
did = did+1
# If that one is also empty, try sample on other side of original summer
#     date (closer to BST)
if(sum(is.na(mstrdata[did,]))==ncol(mstrdata)){
did = did-2
}
}
sum_comm[p,] = mstrdata[did,]
}
colnames(sum_comm) <- colnames(mstrdata)
rownames(sum_comm) <- bstyrs
# First, get *subset* of years used (i.e., no 2015, 2016)
yrssub <- as.numeric(bstyrs)
# Winter
winpcts = (win_comm/rowSums(win_comm))*100
win_psi = data.frame(matrix(nrow=length(yrssub),ncol=length(yrssub)))
for(yr in 1:length(yrssub)){
yidx = which(yrssub %in% yrssub[yr])
yrpsis = vector()
for(yc in 1:length(yrssub)){
yrdfs = winpcts[yidx,]-winpcts[yc,]
ypsi = 100-0.5*sum(abs(yrdfs))
yrpsis = c(yrpsis,ypsi)
}
win_psi[yr,] = yrpsis
}
rownames(win_psi) <- yrssub
colnames(win_psi) <- yrssub
# Calculate 'avg PSI' for each year (aka the average of its PSIs with all other years)
win_avg_psi <- colMeans(win_psi)
winpsi_tib <- as_tibble(win_psi)
# BST
bstpcts = (bst_comm/rowSums(bst_comm))*100
bst_psi = data.frame(matrix(nrow=length(yrssub),ncol=length(yrssub)))
for(yr in 1:length(yrssub)){
yidx = which(yrssub %in% yrssub[yr])
yrpsis = vector()
for(yc in 1:length(yrssub)){
yrdfs = bstpcts[yidx,]-bstpcts[yc,]
ypsi = 100-0.5*sum(abs(yrdfs))
yrpsis = c(yrpsis,ypsi)
}
bst_psi[yr,] = yrpsis
}
rownames(bst_psi) <- yrssub
colnames(bst_psi) <- yrssub
# Calculate 'avg PSI' for each year (aka the average of its PSIs with all other years)
bst_avg_psi <- colMeans(bst_psi)
# Summer
sumpcts = (sum_comm/rowSums(sum_comm))*100
sum_psi = data.frame(matrix(nrow=length(yrssub),ncol=length(yrssub)))
for(yr in 1:length(yrssub)){
yidx = which(yrssub %in% yrssub[yr])
yrpsis = vector()
for(yc in 1:length(yrssub)){
yrdfs = sumpcts[yidx,]-sumpcts[yc,]
ypsi = 100-0.5*sum(abs(yrdfs))
yrpsis = c(yrpsis,ypsi)
}
sum_psi[yr,] = yrpsis
}
rownames(sum_psi) <- yrssub
colnames(sum_psi) <- yrssub
# Calculate 'avg PSI' for each year (aka the average of its PSIs with all other years)
sum_avg_psi <- colMeans(sum_psi)
# ### PLOT 3 - SUMMER PSI
# First, melt DF down to single columns (from square matrix)
sum_psi_mlt <- as_tibble(melt(as.matrix(sum_psi), id = colnames(as.matrix(sum_psi))))
colnames(sum_psi_mlt) <- c("Year", "Comp_yr", "PSI")
sum_psi_srt <- sum_psi_mlt |>
arrange(Year) |>
mutate(PSI = replace(PSI, PSI == 100, 0))
plt05_3 <- ggplot(data = sum_psi_srt, aes(x = Year, y = PSI)) +  # For some reason, have to plot the GAM first...
geom_point(aes(x = Year, y = PSI, color = factor(Comp_yr), shape = factor(Comp_yr))) +
ylim(c(0,100)) +
scale_color_manual(name = 'Year',
labels = yrssub,
values = psicols2) +
scale_shape_manual(name = 'Year',
labels = yrssub,
values = psisyms2) +
scale_x_continuous(breaks = seq(1996,2020,1),
labels = c("1996","","","",
"2000","","","",
"2004","","","",
"2008","","","",
"2012","","","",
"2016","","","","2020")) +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "grey50", fill = NA, size = 0.4),
legend.key=element_blank()) +
guides(color = guide_legend(ncol = 7),
shape = guide_legend(ncol = 7))
plt05_3
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P5_3_Sum_8wks_PSI.png", plot = plt05_3, width = 2000, height = 1600, units = 'px')
library(lubridate)
# ### Input copepod species file
copeflin <- read.csv('NH05_CopeDens_log_subSpp_1996_2020.csv')
copefl <- cbind(copeflin[,1:4],(10^(copeflin[,5:ncol(copeflin)]-1))-0.1)
head(copefl)
source("C:/Users/laura/Documents/Coding/Project_Repositories/Lilly_etal_XX_NCC_CopepodBSTPhysDrivers_v2/Lilly_etal_NCC_CopePhys_S3a_SppProps.R", echo=TRUE)
source("C:/Users/laura/Documents/Coding/Project_Repositories/Lilly_etal_XX_NCC_CopepodBSTPhysDrivers_v2/Lilly_etal_NCC_CopePhys_S5a_PSISeason_v2.R", echo=TRUE)
# ### Step 1: Convert Dates -> Yearday
modys = c(31,28,31,30,31,30,31,31,30,31,30,31) # Number of days in each month -> to multiply by
# BST dates --> convert to yearday
bstyrdy = vector()
for(w in 1:length(sprdts)){
mno = month(sprdts[w])-1 # Subtract 1 because you only want number of *whole* months prior
if(mno > 0){
mdsum = sum(modys[1:mno])
} else if (mno == 0){
mdsum = 0
}
dsum = mdsum+day(sprdts[w])
bstyrdy = c(bstyrdy,dsum)
}
yrlbls = year(sprdts)
# ### Step 2: Calculate avg PSI for each year within a season
# ALT #1: Just use 'normal' BST that already contains 2015, 2016 -> but
#     assign it the same vector name so I can switch out to Option 1 if needed
bstyrdy_plt = bstyrdy
# ### Step 2: Calculate avg PSI for each year within a season
# # ALT #1: Just use 'normal' BST that already contains 2015, 2016 -> but
# #     assign it the same vector name so I can switch out to Option 1 if needed
# bstyrdy_plt = bstyrdy
# ALT #2: Add 'placeholder' values for 2015, 2016 --> if I'm using a
#     BST dates vector *without* 2015, 2016
bstyrdy_plt = append(bstyrdy,c(50,50),after=19) # Add values of '50' so they fall on x-axis
# WINTER (each year compared to all other years)
win_col_psi = colMeans(win_psi)
# SUMMER
sum_col_psi = colMeans(sum_psi)
# ## OPTION 2: WITH 2015, 2016 (on x-axis)
dev.new()
par(pty='s')
plot(win_col_psi,bstyrdy_plt,xlim=c(42,68),ylim=c(50,250),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,22,24)],
bstyrdy_plt[c(2,9,12,18,19,22,24)]+7,
yrlbls[c(2,9,12,18,19,22,24)],col='grey50') # Neutral
win_col_psi
bstyrdy
bstyrdy_plt
sprdt
sprtdts
# BST dates --> convert to yearday
bstyrdy = vector()
for(w in 1:length(bstdts)){
mno = month(bstdts[w])-1 # Subtract 1 because you only want number of *whole* months prior
if(mno > 0){
mdsum = sum(modys[1:mno])
} else if (mno == 0){
mdsum = 0
}
dsum = mdsum+day(bstdts[w])
bstyrdy = c(bstyrdy,dsum)
}
yrlbls = year(bstdts)
bstyrdy
# ### Step 2: Calculate avg PSI for each year within a season
# # ALT #1: Just use 'normal' BST that already contains 2015, 2016 -> but
# #     assign it the same vector name so I can switch out to Option 1 if needed
# bstyrdy_plt = bstyrdy
# ALT #2: Add 'placeholder' values for 2015, 2016 --> if I'm using a
#     BST dates vector *without* 2015, 2016
bstyrdy_plt = append(bstyrdy,c(50,50),after=19) # Add values of '50' so they fall on x-axis
bstyrdy_plt
# ### Step 2: Calculate avg PSI for each year within a season
# ALT #1: Don't need to add placeholder values for 2015, 2016, because
#   they are already removed from PSIs DF
bstyrdy_plt = bstyrdy
# WINTER (each year compared to all other years)
win_col_psi = colMeans(win_psi)
# SUMMER
sum_col_psi = colMeans(sum_psi)
# ## OPTION 2: WITH 2015, 2016 (on x-axis)
dev.new()
par(pty='s')
plot(win_col_psi,bstyrdy_plt,xlim=c(42,68),ylim=c(50,250),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,22,24)],
bstyrdy_plt[c(2,9,12,18,19,22,24)]+7,
yrlbls[c(2,9,12,18,19,22,24)],col='grey50') # Neutral
text(win_col_psi[c(3,15)],
bstyrdy_plt[c(3,15)]+7,
yrlbls[c(3,15)],col='orangered') #El Nino
text(win_col_psi[c(21)]+1,
bstyrdy_plt[c(21)]-7,
yrlbls[c(21)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)],
bstyrdy_plt[c(1,8,10)]+7,
yrlbls[c(1,8,10)],col='orange') # Warm years
text(win_col_psi[c(20)]-1,
bstyrdy_plt[c(20)]-7,
yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,17,23,25)],
bstyrdy_plt[c(6,7,11,17,23,25)]+7,
yrlbls[c(6,7,11,17,23,25)],col='skyblue2') # cool years
text(win_col_psi[c(14)]-1.5,
bstyrdy_plt[c(14)],
yrlbls[c(14)],col='skyblue2') # cool years, pt. 2
text(win_col_psi[c(4,13,16)],
bstyrdy_plt[c(4,13,16)]+7,
yrlbls[c(4,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(5)]-1.5,
bstyrdy_plt[c(5)],
yrlbls[c(5)],col='royalblue3') # La Nina, pt. 2
# Test for a linear model
scttr5a = lm(bstyrdy_plt ~ win_col_psi)
abline(scttr5a)
scttr5a
summary(scttr5a)
#########
# FIG. 5B:
dev.new()
par(pty='s')
plot(win_col_psi,sum_col_psi,xlim=c(42,68),ylim = c(35,75),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,22,24)]+1.5,
sum_col_psi[c(2,9,12,18,19,22,24)],
yrlbls[c(2,9,12,18,19,22,24)],col='grey50') # Neutral
text(win_col_psi[c(3,21)]+1.5,
sum_col_psi[c(3,21)],
yrlbls[c(3,21)],col='orangered') #El Nino
text(win_col_psi[c(15)]-1.5,
sum_col_psi[c(15)],
yrlbls[c(15)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)]+1.5,
sum_col_psi[c(1,8,10)],
yrlbls[c(1,8,10)],col='orange') # Warm years
text(win_col_psi[c(20)]+1.5,
sum_col_psi[c(20)],
yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,14,23)]+0.5,
sum_col_psi[c(6,7,11,14,23)]-1,
yrlbls[c(6,7,11,14,23)],col='skyblue2') # cool years
text(win_col_psi[c(17)]-1,
sum_col_psi[c(17)]+1,
yrlbls[c(17)],col='skyblue2') # cool years, pt. 2 -> 2012
text(win_col_psi[c(25)]+1,
sum_col_psi[c(25)]+1,
yrlbls[c(25)],col='skyblue2') # cool years, pt. 3 -> 2020
text(win_col_psi[c(5,13,16)],
sum_col_psi[c(5,13,16)]-1,
yrlbls[c(5,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(4)]-1.5,
sum_col_psi[c(4)],
yrlbls[c(4)],col='royalblue3') # La NiÃ±a
# Test for a linear model
scttr5b = lm(sum_col_psi ~ win_col_psi)
abline(scttr5b)
summary(scttr5b)
win_col_psi
# ## OPTION 2: WITH 2015, 2016 (on x-axis)
dev.new()
par(pty='s')
plot(win_col_psi,bstyrdy_plt,xlim=c(42,68),ylim=c(50,250),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,20,22)],
bstyrdy_plt[c(2,9,12,18,19,20,22)]+7,
yrlbls[c(2,9,12,18,19,20,22)],col='grey50') # Neutral
text(win_col_psi[c(3,15)],
bstyrdy_plt[c(3,15)]+7,
yrlbls[c(3,15)],col='orangered') #El Nino
# text(win_col_psi[c(21)]+1,
#      bstyrdy_plt[c(21)]-7,
#      yrlbls[c(21)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)],
bstyrdy_plt[c(1,8,10)]+7,
yrlbls[c(1,8,10)],col='orange') # Warm years
# text(win_col_psi[c(20)]-1,
#      bstyrdy_plt[c(20)]-7,
#      yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,17,21,23)],
bstyrdy_plt[c(6,7,11,17,21,23)]+7,
yrlbls[c(6,7,11,17,21,23)],col='skyblue2') # cool years
text(win_col_psi[c(14)]-1.5,
bstyrdy_plt[c(14)],
yrlbls[c(14)],col='skyblue2') # cool years, pt. 2
text(win_col_psi[c(4,13,16)],
bstyrdy_plt[c(4,13,16)]+7,
yrlbls[c(4,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(5)]-1.5,
bstyrdy_plt[c(5)],
yrlbls[c(5)],col='royalblue3') # La Nina, pt. 2
# Test for a linear model
scttr5a = lm(bstyrdy_plt ~ win_col_psi)
abline(scttr5a)
#########
# FIG. 5B:
dev.new()
par(pty='s')
plot(win_col_psi,sum_col_psi,xlim=c(42,68),ylim = c(45,80),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,20,22)]+1.5,
sum_col_psi[c(2,9,12,18,19,20,22)],
yrlbls[c(2,9,12,18,19,20,22)],col='grey50') # Neutral
text(win_col_psi[c(3,15)]+1.5,
sum_col_psi[c(3,15)],
yrlbls[c(3,15)],col='orangered') #El Nino
# text(win_col_psi[c(21)]-1.5,
#      sum_col_psi[c(21)],
#      yrlbls[c(21)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)]+1.5,
sum_col_psi[c(1,8,10)],
yrlbls[c(1,8,10)],col='orange') # Warm years
# text(win_col_psi[c(20)]+1.5,
#      sum_col_psi[c(20)],
#      yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,14,21)]+0.5,
sum_col_psi[c(6,7,11,14,21)]-1,
yrlbls[c(6,7,11,14,21)],col='skyblue2') # cool years
text(win_col_psi[c(17)]-1,
sum_col_psi[c(17)]+1,
yrlbls[c(17)],col='skyblue2') # cool years, pt. 2 -> 2012
text(win_col_psi[c(23)]+1,
sum_col_psi[c(23)]+1,
yrlbls[c(23)],col='skyblue2') # cool years, pt. 3 -> 2020
text(win_col_psi[c(5,13,16)],
sum_col_psi[c(5,13,16)]-1,
yrlbls[c(5,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(4)]-1.5,
sum_col_psi[c(4)],
yrlbls[c(4)],col='royalblue3') # La NiÃ±a
# Test for a linear model
scttr5b = lm(sum_col_psi ~ win_col_psi)
abline(scttr5b)
#########
# FIG. 5B:
dev.new()
par(pty='s')
plot(win_col_psi,sum_col_psi,xlim=c(45,70),ylim = c(45,80),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,20,22)]+1.5,
sum_col_psi[c(2,9,12,18,19,20,22)],
yrlbls[c(2,9,12,18,19,20,22)],col='grey50') # Neutral
text(win_col_psi[c(3,15)]+1.5,
sum_col_psi[c(3,15)],
yrlbls[c(3,15)],col='orangered') #El Nino
# text(win_col_psi[c(21)]-1.5,
#      sum_col_psi[c(21)],
#      yrlbls[c(21)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)]+1.5,
sum_col_psi[c(1,8,10)],
yrlbls[c(1,8,10)],col='orange') # Warm years
# text(win_col_psi[c(20)]+1.5,
#      sum_col_psi[c(20)],
#      yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,14,21)]+0.5,
sum_col_psi[c(6,7,11,14,21)]-1,
yrlbls[c(6,7,11,14,21)],col='skyblue2') # cool years
text(win_col_psi[c(17)]-1,
sum_col_psi[c(17)]+1,
yrlbls[c(17)],col='skyblue2') # cool years, pt. 2 -> 2012
text(win_col_psi[c(23)]+1,
sum_col_psi[c(23)]+1,
yrlbls[c(23)],col='skyblue2') # cool years, pt. 3 -> 2020
text(win_col_psi[c(5,13,16)],
sum_col_psi[c(5,13,16)]-1,
yrlbls[c(5,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(4)]-1.5,
sum_col_psi[c(4)],
yrlbls[c(4)],col='royalblue3') # La NiÃ±a
# Test for a linear model
scttr5b = lm(sum_col_psi ~ win_col_psi)
abline(scttr5b)
# ## OPTION 2: WITH 2015, 2016 (on x-axis)
dev.new()
par(pty='s')
plot(win_col_psi,bstyrdy_plt,xlim=c(45,70),ylim=c(50,250),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,20,22)],
bstyrdy_plt[c(2,9,12,18,19,20,22)]+7,
yrlbls[c(2,9,12,18,19,20,22)],col='grey50') # Neutral
text(win_col_psi[c(3,15)],
bstyrdy_plt[c(3,15)]+7,
yrlbls[c(3,15)],col='orangered') #El Nino
# text(win_col_psi[c(21)]+1,
#      bstyrdy_plt[c(21)]-7,
#      yrlbls[c(21)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)],
bstyrdy_plt[c(1,8,10)]+7,
yrlbls[c(1,8,10)],col='orange') # Warm years
# text(win_col_psi[c(20)]-1,
#      bstyrdy_plt[c(20)]-7,
#      yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,17,21,23)],
bstyrdy_plt[c(6,7,11,17,21,23)]+7,
yrlbls[c(6,7,11,17,21,23)],col='skyblue2') # cool years
text(win_col_psi[c(14)]-1.5,
bstyrdy_plt[c(14)],
yrlbls[c(14)],col='skyblue2') # cool years, pt. 2
text(win_col_psi[c(4,13,16)],
bstyrdy_plt[c(4,13,16)]+7,
yrlbls[c(4,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(5)]-1.5,
bstyrdy_plt[c(5)],
yrlbls[c(5)],col='royalblue3') # La Nina, pt. 2
# Test for a linear model
scttr5a = lm(bstyrdy_plt ~ win_col_psi)
abline(scttr5a)
