<<<<<<< HEAD
y = -0.9, size = 4, colour = "black") +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.key=element_blank())
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/PX1_nMDS_LoadsTimeser.png", plot = pltx1a, width = 2000, height = 1000, units = 'px')
pltx2a <- ggplot(mstrdayall, aes(x = Samp_Date, y = NMDS2)) +
geom_point(aes(x = Samp_Date, y = NMDS2), size = 0.7, color = 'grey40') +
geom_smooth(method = "lm")
pltx2a
summary(lm2)
# 4.2: NMDS2
pltx2a <- ggplot(mstrdayall, aes(x = Samp_Date, y = NMDS2)) +
geom_point(aes(x = Samp_Date, y = NMDS2), size = 0.7, color = 'grey40') +
geom_smooth(method = "lm") +
annotate("text", label = "Adj. R^2 = 0.03", x = mstrdayall$Samp_Date[9000],
y = 0.7, size = 4, colour = "black") +
annotate("text", label = "p < 0.001", x = mstrdayall$Samp_Date[9000],
y = 0.6, size = 4, colour = "black") +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.key=element_blank())
pltx2a
# 4.2: NMDS2
pltx2a <- ggplot(mstrdayall, aes(x = Samp_Date, y = NMDS2)) +
geom_point(aes(x = Samp_Date, y = NMDS2), size = 0.7, color = 'grey40') +
geom_smooth(method = "lm") +
annotate("text", label = "Adj. R^2 = 0.03", x = mstrdayall$Samp_Date[8600],
y = 0.7, size = 4, colour = "black") +
annotate("text", label = "p < 0.001", x = mstrdayall$Samp_Date[8600],
y = 0.6, size = 4, colour = "black") +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.key=element_blank())
pltx2a
# 4.2: NMDS2
pltx2a <- ggplot(mstrdayall, aes(x = Samp_Date, y = NMDS2)) +
geom_point(aes(x = Samp_Date, y = NMDS2), size = 0.7, color = 'grey40') +
geom_smooth(method = "lm") +
annotate("text", label = "Adj. R^2 = 0.03", x = mstrdayall$Samp_Date[8200],
y = 0.7, size = 4, colour = "black") +
annotate("text", label = "p < 0.001", x = mstrdayall$Samp_Date[8200],
y = 0.6, size = 4, colour = "black") +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.key=element_blank())
# 4.2: NMDS2
pltx2a <- ggplot(mstrdayall, aes(x = Samp_Date, y = NMDS2)) +
geom_point(aes(x = Samp_Date, y = NMDS2), size = 0.7, color = 'grey40') +
geom_smooth(method = "lm") +
annotate("text", label = "Adj. R^2 = 0.03", x = mstrdayall$Samp_Date[8200],
y = 0.7, size = 4, colour = "black") +
annotate("text", label = "p < 0.001", x = mstrdayall$Samp_Date[8200],
y = 0.6, size = 4, colour = "black") +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.key=element_blank())
pltx2a
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/PX1_nMDS2_LoadsTimeser.png", plot = pltx2a, width = 2000, height = 1000, units = 'px')
# PLOT 1 - NMDS1
plt02_1 <- ggplot(data = model_gm1, aes(x = DOY, y = fit)) +  # For some reason, have to plot the GAM first...
geom_smooth_ci(linetype = 'dashed', lwd = 1) +
geom_point(data = mstrdts_tib, aes(x = DOY, y = NMDS1, color = factor(pltyr), shape = factor(pltyr))) +
ylim(c(-1.5,1.5)) +
=======
}
win_comm[p,] = mstrdata[did,]
}
colnames(win_comm) <- colnames(mstrdata)
rownames(win_comm) <- bstyrs
# BST
bst_comm <- data.frame(matrix(nrow=length(bstdts),ncol=ncol(mstrdata)))
for(p in 1:length(bstdts)){
did = which.min(abs(dtmstr-bstdts[p]))
# This one is pretty straightforward: If the BST sample is empty... well,
#     so be it (but it shouldn't be... because the BST is sort of necessarily
#     defined by a present sample)
bst_comm[p,] = mstrdata[did,]
}
colnames(bst_comm) <- colnames(mstrdata)
rownames(bst_comm) <- bstyrs
# SUMMER
sum_comm <- data.frame(matrix(nrow=length(sumdts),ncol=ncol(mstrdata)))
for(p in 1:length(sumdts)){
did = which.min(abs(dtmstr-sumdts[p]))
dval = dtmstr[did]-sumdts[p]
# If the closest matching date is empty (no samples), move to next closest
#     date, but *farther* away from BST (i.e., farther ahead in *summer*)
if(sum(is.na(mstrdata[did,]))==ncol(mstrdata)){
did = did+1
# If that one is also empty, try sample on other side of original summer
#     date (closer to BST)
if(sum(is.na(mstrdata[did,]))==ncol(mstrdata)){
did = did-2
}
}
sum_comm[p,] = mstrdata[did,]
}
colnames(sum_comm) <- colnames(mstrdata)
rownames(sum_comm) <- bstyrs
# First, get *subset* of years used (i.e., no 2015, 2016)
yrssub <- as.numeric(bstyrs)
# Winter
winpcts = (win_comm/rowSums(win_comm))*100
win_psi = data.frame(matrix(nrow=length(yrssub),ncol=length(yrssub)))
for(yr in 1:length(yrssub)){
yidx = which(yrssub %in% yrssub[yr])
yrpsis = vector()
for(yc in 1:length(yrssub)){
yrdfs = winpcts[yidx,]-winpcts[yc,]
ypsi = 100-0.5*sum(abs(yrdfs))
yrpsis = c(yrpsis,ypsi)
}
win_psi[yr,] = yrpsis
}
rownames(win_psi) <- yrssub
colnames(win_psi) <- yrssub
# Calculate 'avg PSI' for each year (aka the average of its PSIs with all other years)
win_avg_psi <- colMeans(win_psi)
winpsi_tib <- as_tibble(win_psi)
# BST
bstpcts = (bst_comm/rowSums(bst_comm))*100
bst_psi = data.frame(matrix(nrow=length(yrssub),ncol=length(yrssub)))
for(yr in 1:length(yrssub)){
yidx = which(yrssub %in% yrssub[yr])
yrpsis = vector()
for(yc in 1:length(yrssub)){
yrdfs = bstpcts[yidx,]-bstpcts[yc,]
ypsi = 100-0.5*sum(abs(yrdfs))
yrpsis = c(yrpsis,ypsi)
}
bst_psi[yr,] = yrpsis
}
rownames(bst_psi) <- yrssub
colnames(bst_psi) <- yrssub
# Calculate 'avg PSI' for each year (aka the average of its PSIs with all other years)
bst_avg_psi <- colMeans(bst_psi)
# Summer
sumpcts = (sum_comm/rowSums(sum_comm))*100
sum_psi = data.frame(matrix(nrow=length(yrssub),ncol=length(yrssub)))
for(yr in 1:length(yrssub)){
yidx = which(yrssub %in% yrssub[yr])
yrpsis = vector()
for(yc in 1:length(yrssub)){
yrdfs = sumpcts[yidx,]-sumpcts[yc,]
ypsi = 100-0.5*sum(abs(yrdfs))
yrpsis = c(yrpsis,ypsi)
}
sum_psi[yr,] = yrpsis
}
rownames(sum_psi) <- yrssub
colnames(sum_psi) <- yrssub
# Calculate 'avg PSI' for each year (aka the average of its PSIs with all other years)
sum_avg_psi <- colMeans(sum_psi)
# ### PLOT 3 - SUMMER PSI
# First, melt DF down to single columns (from square matrix)
sum_psi_mlt <- as_tibble(melt(as.matrix(sum_psi), id = colnames(as.matrix(sum_psi))))
colnames(sum_psi_mlt) <- c("Year", "Comp_yr", "PSI")
sum_psi_srt <- sum_psi_mlt |>
arrange(Year) |>
mutate(PSI = replace(PSI, PSI == 100, 0))
plt05_3 <- ggplot(data = sum_psi_srt, aes(x = Year, y = PSI)) +  # For some reason, have to plot the GAM first...
geom_point(aes(x = Year, y = PSI, color = factor(Comp_yr), shape = factor(Comp_yr))) +
ylim(c(0,100)) +
>>>>>>> master
scale_color_manual(name = 'Year',
labels = yrssub,
values = psicols2) +
scale_shape_manual(name = 'Year',
labels = yrssub,
values = psisyms2) +
scale_x_continuous(breaks = seq(1996,2020,1),
labels = c("1996","","","",
"2000","","","",
"2004","","","",
"2008","","","",
"2012","","","",
"2016","","","","2020")) +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "grey50", fill = NA, size = 0.4),
legend.key=element_blank()) +
guides(color = guide_legend(ncol = 7),
shape = guide_legend(ncol = 7))
<<<<<<< HEAD
plt02_1
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P2_nMDS1_YrlyCyc.png", plot = plt02_1, width = 2000, height = 1600, units = 'px')
# PLOT 2 - NMDS2
plt02_2 <- ggplot(data = model_gm2, aes(x = DOY, y = fit)) +  # For some reason, have to plot the GAM first...
geom_smooth_ci(linetype = 'dashed', lwd = 1) +
geom_point(data = mstrdts_tib, aes(x = DOY, y = NMDS2, color = factor(pltyr), shape = factor(pltyr))) +
ylim(c(-1.5,1.5)) +
scale_color_manual(name = 'Year',
labels = yrsplt,
values = colsall) +
scale_shape_manual(name = 'Year',
labels = yrsplt,
values = symsall) +
scale_x_continuous(breaks = mstrdts_tib |>
group_by(month(Samp_Date)) |>
summarize(ndays = min(DOY)) |>
slice(c(1:12)) |>
pull(ndays),
labels = month.abb[c(1:12)]) +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
# legend.position = "none",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.key=element_blank()) +
guides(color = guide_legend(ncol = 7),
shape = guide_legend(ncol = 7))
plt02_2
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P2_nMDS2_YrlyCyc.png", plot = plt02_2, width = 2000, height = 1600, units = 'px')
# PLOT 2 - NMDS2
plt02_2 <- ggplot(data = model_gm2, aes(x = DOY, y = fit)) +  # For some reason, have to plot the GAM first...
geom_smooth_ci(linetype = 'dashed', lwd = 1) +
geom_point(data = mstrdts_tib, aes(x = DOY, y = NMDS2, color = factor(pltyr), shape = factor(pltyr))) +
ylim(c(-1.5,1.5)) +
scale_color_manual(name = 'Year',
labels = yrsplt,
values = colsall) +
scale_shape_manual(name = 'Year',
labels = yrsplt,
values = symsall) +
scale_x_continuous(breaks = mstrdts_tib |>
group_by(month(Samp_Date)) |>
summarize(ndays = min(DOY)) |>
slice(c(1:12)) |>
pull(ndays),
labels = month.abb[c(1:12)]) +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
# legend.position = "bottom",
legend.position = "none",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.key=element_blank()) +
guides(color = guide_legend(ncol = 7),
shape = guide_legend(ncol = 7))
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P2_nMDS2_YrlyCyc_noLgd.png", plot = plt02_2, width = 2000, height = 1200, units = 'px')
# PLOT 1 - NMDS1
plt02_1 <- ggplot(data = model_gm1, aes(x = DOY, y = fit)) +  # For some reason, have to plot the GAM first...
geom_smooth_ci(linetype = 'dashed', lwd = 1) +
geom_point(data = mstrdts_tib, aes(x = DOY, y = NMDS1, color = factor(pltyr), shape = factor(pltyr))) +
ylim(c(-1.1,1.1)) +
scale_color_manual(name = 'Year',
labels = yrsplt,
values = colsall) +
scale_shape_manual(name = 'Year',
labels = yrsplt,
values = symsall) +
scale_x_continuous(breaks = mstrdts_tib |>
group_by(month(Samp_Date)) |>
summarize(ndays = min(DOY)) |>
slice(c(1:12)) |>
pull(ndays),
labels = month.abb[c(1:12)]) +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.key=element_blank()) +
guides(color = guide_legend(ncol = 7),
shape = guide_legend(ncol = 7))
plt02_1
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P2_nMDS1_YrlyCyc.png", plot = plt02_1, width = 2000, height = 1600, units = 'px')
# PLOT 2 - NMDS2
plt02_2 <- ggplot(data = model_gm2, aes(x = DOY, y = fit)) +  # For some reason, have to plot the GAM first...
geom_smooth_ci(linetype = 'dashed', lwd = 1) +
geom_point(data = mstrdts_tib, aes(x = DOY, y = NMDS2, color = factor(pltyr), shape = factor(pltyr))) +
ylim(c(-1.1,1.1)) +
scale_color_manual(name = 'Year',
labels = yrsplt,
values = colsall) +
scale_shape_manual(name = 'Year',
labels = yrsplt,
values = symsall) +
scale_x_continuous(breaks = mstrdts_tib |>
group_by(month(Samp_Date)) |>
summarize(ndays = min(DOY)) |>
slice(c(1:12)) |>
pull(ndays),
labels = month.abb[c(1:12)]) +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
# legend.position = "bottom",
legend.position = "none",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.key=element_blank()) +
guides(color = guide_legend(ncol = 7),
shape = guide_legend(ncol = 7))
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P2_nMDS2_YrlyCyc_noLgd.png", plot = plt02_2, width = 2000, height = 1200, units = 'px')
# PLOT 2 - NMDS2
plt02_2 <- ggplot(data = model_gm2, aes(x = DOY, y = fit)) +  # For some reason, have to plot the GAM first...
geom_smooth_ci(linetype = 'dashed', lwd = 1) +
geom_point(data = mstrdts_tib, aes(x = DOY, y = NMDS2, color = factor(pltyr), shape = factor(pltyr))) +
ylim(c(-1.1,1.1)) +
scale_color_manual(name = 'Year',
labels = yrsplt,
values = colsall) +
scale_shape_manual(name = 'Year',
labels = yrsplt,
values = symsall) +
scale_x_continuous(breaks = mstrdts_tib |>
group_by(month(Samp_Date)) |>
summarize(ndays = min(DOY)) |>
slice(c(1:12)) |>
pull(ndays),
labels = month.abb[c(1:12)]) +
theme(axis.text = element_text(colour = "black", size = 12),
legend.text = element_text(size = 12, colour ="black"),
legend.position = "bottom",
# legend.position = "none",
axis.title = element_text(size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black"),
panel.background = element_blank(),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5),
legend.key=element_blank()) +
guides(color = guide_legend(ncol = 7),
shape = guide_legend(ncol = 7))
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P2_nMDS2_YrlyCyc.png", plot = plt02_2, width = 2000, height = 1600, units = 'px')
########## Data In ##########
flws_fl <- read.csv('NH10_Flows_Inst_Cumu.csv')
head(flws_fl)
########## Data In ##########
flwsfl <- read.csv('NH10_Flows_Inst_Cumu.csv')
########## Reshape DFs #########
inst_flw <- flwsfl[,1:2]
cumu_flw <- cbind(flwsfl[,1], flwsfl[,3])
flws_data <- flwsfl |>
mutate(Year = year(Date),
.after = Date)
library(tidyverse)
########## Data In ##########
flwsfl <- read.csv('NH10_Flows_Inst_Cumu.csv')
flws_data <- flwsfl |>
mutate(Year = year(Date),
.after = Date)
library(lubridate)
flws_data <- flwsfl |>
mutate(Year = year(Date),
.after = Date)
flws_data <- flwsfl |>
mutate(Date = as.Date(Date, format = "%d-%m-%Y"))
flws_data
flwsfl$Date
class(flwsfl$Date)
as.Date(flwsfl$Date[1],"%d-%m-%Y" )
as.Date(flwsfl$Date[1],"%Y-%m-%d")
as.Date(flwsfl$Date[1])
as.Date(flwsfl$Date[1],"%d-%M-%Y")
as.Date(flwsfl$Date[1],"%d-%b-%Y")
flws_data <- flwsfl |>
mutate(Date = as.Date(Date, format = "%d-%b-%Y"),
Year = year(Date),
.after = Date)
head(flws_data)
inst_flw <- flws_data |>
select(Date,Year,Inst_flow)
cumu_flw <- flws_data |>
select(Date,Year,Cumu_flow)
# Plot 1: Instantaneous flow - year-chunks
plt1 <- ggplot(data = inst_flw, aes(x = Date, y = inst_flow, group = Year)) +
geom_line(aes(color = Year, group = Year))
plt1
head(inst_flw)
# Plot 1: Instantaneous flow - year-chunks
plt1 <- ggplot(data = inst_flw, aes(x = Date, y = Inst_flow, group = Year)) +
geom_line(aes(color = Year, group = Year))
plt1
# Plot 1: Instantaneous flow - year-chunks
plt1 <- ggplot(data = inst_flw, aes(x = Date, y = Inst_flow)) +
geom_line(aes(color = Year, group = Year))
plt1
library(reshape2)
head(inst_flw)
# ### Plot 1: Instantaneous flow - year-chunks
# First, melt DF to see if that helps with plotting (even though it's already in shape)
inst_mlt <- melt(inst_flw, id = "Date")
head(inst_mlt)
# ### Plot 1: Instantaneous flow - year-chunks
# First, melt DF to see if that helps with plotting (even though it's already in shape)
inst_mlt <- melt(inst_flw, id = "Year")
# ### Plot 1: Instantaneous flow - year-chunks
# First, melt DF to see if that helps with plotting (even though it's already in shape)
colnames(inst_flw) <- c("Date", "variable", "value")
head(inst_flw)
flws_data <- flwsfl |>
mutate_all(~ifelse(is.nan(.), NA, .)) |>
mutate(Date = as.Date(Date, format = "%d-%b-%Y"),
Year = year(Date),
.after = Date)
head(flws_data)
########## Reshape DFs #########
inst_flw <- flws_data |>
select(Date,Year,Inst_flow)
cumu_flw <- flws_data |>
select(Date,Year,Cumu_flow)
# ### Plot 1: Instantaneous flow - year-chunks
# First, melt DF to see if that helps with plotting (even though it's already in shape)
colnames(inst_flw) <- c("Date", "variable", "value")
plt1 <- ggplot(data = inst_flw, aes(x = Date, y = Inst_flow)) +
geom_line(aes(color = Year, group = Year))
plt1
plt1 <- ggplot(data = inst_flw, aes(x = Date, y = value)) +
geom_line(aes(color = variable, group = variable))
plt1
inst_flw <- flws_data |>
mutate(dt_mody = format(Date, format = "%m-%d")) |>
select(dt_mody,Year,Inst_flow)
head(inst_flw)
plt1 <- ggplot(data = inst_flw, aes(x = dt_mody, y = Year)) +
geom_line(aes(color = Year, group = Year))
plt1
plt1 <- ggplot(data = inst_flw, aes(x = dt_mody, y = Inst_flow)) +
geom_line(aes(color = Year, group = Year))
plt1
plt1 <- ggplot(data = inst_flw, aes(x = dt_mody, y = Inst_flow)) +
geom_line(aes(color = Year, group = Year)) +
geom_segment(aes(x = dt_mody[1], xend = dt_mody[length(dt_mody)],
y = 0, yend = 0), color = "black", lwd = 1)
plt1
plt1 <- ggplot(data = inst_flw, aes(x = dt_mody, y = Inst_flow)) +
geom_line(aes(color = factor(Year), group = Year)) +
geom_segment(aes(x = dt_mody[1], xend = dt_mody[length(dt_mody)],
y = 0, yend = 0), color = "black", lwd = 1) +
ylab("Flow (m/s)") +
xlab("Date")
scale_x_date(date_labels = "%b", date_breaks = "1 month")
plt1
plt1 <- ggplot(data = inst_flw, aes(x = dt_mody, y = Inst_flow)) +
geom_line(aes(color = factor(Year), group = Year)) +
geom_segment(aes(x = dt_mody[1], xend = dt_mody[length(dt_mody)],
y = 0, yend = 0), color = "black", lwd = 1) +
ylab("Flow (m/s)") +
xlab("Date") +
scale_x_date(date_labels = "%b", date_breaks = "1 month")
plt1
inst_flw <- flws_data |>
mutate(dt_mody = format(Date, format = "%m-%d"))
head(inst_flw)
inst_flw <- flws_data |>
mutate(dt_mody = format(Date, format = "%m-%d")) |>
select(Date,dt_mody,Year,Inst_flow)
dim(inst_flw)
9131class(inst_flw$dt_mody)
class(inst_flw$dt_mody)
# ### Plot 1: Instantaneous flow - year-chunks
plt1 <- ggplot(data = inst_flw, aes(x = dt_mody, y = Inst_flow)) +
geom_line(aes(color = factor(Year), group = Year)) +
geom_segment(aes(x = dt_mody[1], xend = dt_mody[length(dt_mody)],
y = 0, yend = 0), color = "black", lwd = 1) +
ylab("Flow (m/s)") +
xlab("Date")
plt1
library(tidyverse)
library(lubridate)
library(reshape2)
########## Data In ##########
flwsfl <- read.csv('NH10_Flows_Inst_Cumu.csv')
# Dataset cleanup and date conversion
flws_data <- flwsfl |>
mutate_all(~ifelse(is.nan(.), NA, .)) |>
mutate(Date = as.Date(Date, format = "%d-%b-%Y"),
Year = year(Date),
.after = Date)
########## Reshape DFs and get info #########
# ### DF #1: Instantaneous flow
# First, reconfigure dates
inst_flw <- flws_data |>
mutate(dt_mody = format(Date, format = "%m-%d"),
plt_dt = seq.Date(as.Date("2000-01-01"),
as.Date("2000-12-31"),
by = "day")) |>
select(Date,dt_mody,Year,Inst_flow)
dim(flws_data)
inst_flw <- flws_data |>
mutate(dt_mody = format(Date, format = "%m-%d"))
dim(inst_flws)
dim(inst_flw)
head(inst_flw)
lengh(unique(flws_data$Year))
length(unique(flws_data$Year))
9131/25
9131-6
9125/365
inst_flw <- flws_data |>
mutate(dt_mody = format(Date, format = "%m-%d"),
# Will have to remove Leap Days if I want to add a repeat Date seq for plotting
# plt_dt = rep(seq.Date(as.Date("1999-01-01"),
#                  as.Date("1999-12-31"),
#                  by = "day")
) |>
select(Date,dt_mody,Year,Inst_flow)
head(inst_flw)
inst_flw <- flws_data |>
mutate(dt_mody = format(Date, format = "%m-%d"),
# Will have to remove Leap Days if I want to add a repeat Date seq for plotting
# plt_dt = rep(seq.Date(as.Date("1999-01-01"),
#                  as.Date("1999-12-31"),
#                  by = "day")
) |>
select(dt_mody,Year,Inst_flow) |>
pivot_wider(names_from = Year, values_from = Inst_flow)
head(inst_flw)
########## Reshape DFs and get info #########
# ### DF #1: Instantaneous flow
# First, reconfigure dates
inst_flw <- flws_data |>
mutate(dt_mody = format(Date, format = "%m-%d"),
# Will have to remove Leap Days if I want to add a repeat Date seq for plotting
# plt_dt = rep(seq.Date(as.Date("1999-01-01"),
#                  as.Date("1999-12-31"),
#                  by = "day")
) |>
select(dt_mody,Year,Inst_flow)
inst_flw_yrly <- inst_flw |>
pivot_wider(names_from = Year, values_from = Inst_flow)
# ### DF #2: Cumulative flow
cumu_flw <- flws_data |>
select(Date,Year,Cumu_flow)
# ### Plot 1: Instantaneous flow - year-chunks
plt1 <- ggplot(data = inst_flw, aes(x = dt_mody, y = Inst_flow)) +
geom_line(aes(color = factor(Year), group = Year)) +
geom_segment(aes(x = dt_mody[1], xend = dt_mody[length(dt_mody)],
y = 0, yend = 0), color = "black", lwd = 1) +
ylab("Flow (m/s)") +
xlab("Date")
plt1
ncol(inst_flw_yrly)
i = 2
idx1 = find(inst_neg1[,i] <= 0)[1]
idx1 = find(inst_flw_yrly[,i] <= 0)
i
head(inst_flw_yrly)
inst_flw_yrly[,i]
find(inst_flw_yrly[,i] <= 0)
find(inst_flw_yrly[,i] <= 0, na.rm = TRUE)
class(inst_flw_yrly[,2])
class(inst_flw_yrly$`1997`)
which(inst_flw_yrly[,i] < 0)
inst_flw_yrly[224]
inst_flw_yrly[224,]
inst_flw_yrly[200:224,]
inst_neg1 <- data.frame(matrix(nrow = 1, ncol = ncol(inst_flw_yrly)-1))
for(i in 2:ncol(inst_flw_yrly)){
idx1 = which(inst_flw_yrly[,i] < 0)[1]
dt1 = inst_flw_yrly[1,i]
inst_neg1[1,i] <- dt1
}
inst_neg1
ncol(inst_flw_yrly)
inst_neg1 <- data.frame(matrix(nrow = 1, ncol = ncol(inst_flw_yrly)-1))
for(i in 2:ncol(inst_flw_yrly)){
idx1 = which(inst_flw_yrly[,i] < 0)[1]
dt1 = inst_flw_yrly[idx1,1]
inst_neg1[1,i-1] <- dt1
}
inst_neg1
colnames(inst_neg1) <- unique(inst_flw$Year)
inst_neg1
head(cumu_flw)
cumu_flw <- flws_data |>
mutate(dt_mody = format(Date, format = "%m-%d")) |>
select(dt_mody,Year,Cumu_flow)
# ### Plot 2: Instantaneous flow - year-chunks
plt2 <- ggplot(data = cumu_flw, aes(x = dt_mody, y = Cumu_flow)) +
geom_line(aes(color = factor(Year), group = Year)) +
geom_segment(aes(x = dt_mody[1], xend = dt_mody[length(dt_mody)],
y = 0, yend = 0), color = "black", lwd = 1) +
ylab("Flow (m/s)") +
xlab("Date")
plt2
inst_neg1
=======
plt05_3
ggsave("../../../OSU_NOAA_postdoc/Project1_SeasonalUpwelling/Plots_v4/P5_3_Sum_8wks_PSI.png", plot = plt05_3, width = 2000, height = 1600, units = 'px')
library(lubridate)
# ### Input copepod species file
copeflin <- read.csv('NH05_CopeDens_log_subSpp_1996_2020.csv')
copefl <- cbind(copeflin[,1:4],(10^(copeflin[,5:ncol(copeflin)]-1))-0.1)
head(copefl)
source("C:/Users/laura/Documents/Coding/Project_Repositories/Lilly_etal_XX_NCC_CopepodBSTPhysDrivers_v2/Lilly_etal_NCC_CopePhys_S3a_SppProps.R", echo=TRUE)
source("C:/Users/laura/Documents/Coding/Project_Repositories/Lilly_etal_XX_NCC_CopepodBSTPhysDrivers_v2/Lilly_etal_NCC_CopePhys_S5a_PSISeason_v2.R", echo=TRUE)
# ### Step 1: Convert Dates -> Yearday
modys = c(31,28,31,30,31,30,31,31,30,31,30,31) # Number of days in each month -> to multiply by
# BST dates --> convert to yearday
bstyrdy = vector()
for(w in 1:length(sprdts)){
mno = month(sprdts[w])-1 # Subtract 1 because you only want number of *whole* months prior
if(mno > 0){
mdsum = sum(modys[1:mno])
} else if (mno == 0){
mdsum = 0
}
dsum = mdsum+day(sprdts[w])
bstyrdy = c(bstyrdy,dsum)
}
yrlbls = year(sprdts)
# ### Step 2: Calculate avg PSI for each year within a season
# ALT #1: Just use 'normal' BST that already contains 2015, 2016 -> but
#     assign it the same vector name so I can switch out to Option 1 if needed
bstyrdy_plt = bstyrdy
# ### Step 2: Calculate avg PSI for each year within a season
# # ALT #1: Just use 'normal' BST that already contains 2015, 2016 -> but
# #     assign it the same vector name so I can switch out to Option 1 if needed
# bstyrdy_plt = bstyrdy
# ALT #2: Add 'placeholder' values for 2015, 2016 --> if I'm using a
#     BST dates vector *without* 2015, 2016
bstyrdy_plt = append(bstyrdy,c(50,50),after=19) # Add values of '50' so they fall on x-axis
# WINTER (each year compared to all other years)
win_col_psi = colMeans(win_psi)
# SUMMER
sum_col_psi = colMeans(sum_psi)
# ## OPTION 2: WITH 2015, 2016 (on x-axis)
dev.new()
par(pty='s')
plot(win_col_psi,bstyrdy_plt,xlim=c(42,68),ylim=c(50,250),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,22,24)],
bstyrdy_plt[c(2,9,12,18,19,22,24)]+7,
yrlbls[c(2,9,12,18,19,22,24)],col='grey50') # Neutral
win_col_psi
bstyrdy
bstyrdy_plt
sprdt
sprtdts
# BST dates --> convert to yearday
bstyrdy = vector()
for(w in 1:length(bstdts)){
mno = month(bstdts[w])-1 # Subtract 1 because you only want number of *whole* months prior
if(mno > 0){
mdsum = sum(modys[1:mno])
} else if (mno == 0){
mdsum = 0
}
dsum = mdsum+day(bstdts[w])
bstyrdy = c(bstyrdy,dsum)
}
yrlbls = year(bstdts)
bstyrdy
# ### Step 2: Calculate avg PSI for each year within a season
# # ALT #1: Just use 'normal' BST that already contains 2015, 2016 -> but
# #     assign it the same vector name so I can switch out to Option 1 if needed
# bstyrdy_plt = bstyrdy
# ALT #2: Add 'placeholder' values for 2015, 2016 --> if I'm using a
#     BST dates vector *without* 2015, 2016
bstyrdy_plt = append(bstyrdy,c(50,50),after=19) # Add values of '50' so they fall on x-axis
bstyrdy_plt
# ### Step 2: Calculate avg PSI for each year within a season
# ALT #1: Don't need to add placeholder values for 2015, 2016, because
#   they are already removed from PSIs DF
bstyrdy_plt = bstyrdy
# WINTER (each year compared to all other years)
win_col_psi = colMeans(win_psi)
# SUMMER
sum_col_psi = colMeans(sum_psi)
# ## OPTION 2: WITH 2015, 2016 (on x-axis)
dev.new()
par(pty='s')
plot(win_col_psi,bstyrdy_plt,xlim=c(42,68),ylim=c(50,250),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,22,24)],
bstyrdy_plt[c(2,9,12,18,19,22,24)]+7,
yrlbls[c(2,9,12,18,19,22,24)],col='grey50') # Neutral
text(win_col_psi[c(3,15)],
bstyrdy_plt[c(3,15)]+7,
yrlbls[c(3,15)],col='orangered') #El Nino
text(win_col_psi[c(21)]+1,
bstyrdy_plt[c(21)]-7,
yrlbls[c(21)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)],
bstyrdy_plt[c(1,8,10)]+7,
yrlbls[c(1,8,10)],col='orange') # Warm years
text(win_col_psi[c(20)]-1,
bstyrdy_plt[c(20)]-7,
yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,17,23,25)],
bstyrdy_plt[c(6,7,11,17,23,25)]+7,
yrlbls[c(6,7,11,17,23,25)],col='skyblue2') # cool years
text(win_col_psi[c(14)]-1.5,
bstyrdy_plt[c(14)],
yrlbls[c(14)],col='skyblue2') # cool years, pt. 2
text(win_col_psi[c(4,13,16)],
bstyrdy_plt[c(4,13,16)]+7,
yrlbls[c(4,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(5)]-1.5,
bstyrdy_plt[c(5)],
yrlbls[c(5)],col='royalblue3') # La Nina, pt. 2
# Test for a linear model
scttr5a = lm(bstyrdy_plt ~ win_col_psi)
abline(scttr5a)
scttr5a
summary(scttr5a)
#########
# FIG. 5B:
dev.new()
par(pty='s')
plot(win_col_psi,sum_col_psi,xlim=c(42,68),ylim = c(35,75),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,22,24)]+1.5,
sum_col_psi[c(2,9,12,18,19,22,24)],
yrlbls[c(2,9,12,18,19,22,24)],col='grey50') # Neutral
text(win_col_psi[c(3,21)]+1.5,
sum_col_psi[c(3,21)],
yrlbls[c(3,21)],col='orangered') #El Nino
text(win_col_psi[c(15)]-1.5,
sum_col_psi[c(15)],
yrlbls[c(15)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)]+1.5,
sum_col_psi[c(1,8,10)],
yrlbls[c(1,8,10)],col='orange') # Warm years
text(win_col_psi[c(20)]+1.5,
sum_col_psi[c(20)],
yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,14,23)]+0.5,
sum_col_psi[c(6,7,11,14,23)]-1,
yrlbls[c(6,7,11,14,23)],col='skyblue2') # cool years
text(win_col_psi[c(17)]-1,
sum_col_psi[c(17)]+1,
yrlbls[c(17)],col='skyblue2') # cool years, pt. 2 -> 2012
text(win_col_psi[c(25)]+1,
sum_col_psi[c(25)]+1,
yrlbls[c(25)],col='skyblue2') # cool years, pt. 3 -> 2020
text(win_col_psi[c(5,13,16)],
sum_col_psi[c(5,13,16)]-1,
yrlbls[c(5,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(4)]-1.5,
sum_col_psi[c(4)],
yrlbls[c(4)],col='royalblue3') # La NiÃ±a
# Test for a linear model
scttr5b = lm(sum_col_psi ~ win_col_psi)
abline(scttr5b)
summary(scttr5b)
win_col_psi
# ## OPTION 2: WITH 2015, 2016 (on x-axis)
dev.new()
par(pty='s')
plot(win_col_psi,bstyrdy_plt,xlim=c(42,68),ylim=c(50,250),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,20,22)],
bstyrdy_plt[c(2,9,12,18,19,20,22)]+7,
yrlbls[c(2,9,12,18,19,20,22)],col='grey50') # Neutral
text(win_col_psi[c(3,15)],
bstyrdy_plt[c(3,15)]+7,
yrlbls[c(3,15)],col='orangered') #El Nino
# text(win_col_psi[c(21)]+1,
#      bstyrdy_plt[c(21)]-7,
#      yrlbls[c(21)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)],
bstyrdy_plt[c(1,8,10)]+7,
yrlbls[c(1,8,10)],col='orange') # Warm years
# text(win_col_psi[c(20)]-1,
#      bstyrdy_plt[c(20)]-7,
#      yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,17,21,23)],
bstyrdy_plt[c(6,7,11,17,21,23)]+7,
yrlbls[c(6,7,11,17,21,23)],col='skyblue2') # cool years
text(win_col_psi[c(14)]-1.5,
bstyrdy_plt[c(14)],
yrlbls[c(14)],col='skyblue2') # cool years, pt. 2
text(win_col_psi[c(4,13,16)],
bstyrdy_plt[c(4,13,16)]+7,
yrlbls[c(4,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(5)]-1.5,
bstyrdy_plt[c(5)],
yrlbls[c(5)],col='royalblue3') # La Nina, pt. 2
# Test for a linear model
scttr5a = lm(bstyrdy_plt ~ win_col_psi)
abline(scttr5a)
#########
# FIG. 5B:
dev.new()
par(pty='s')
plot(win_col_psi,sum_col_psi,xlim=c(42,68),ylim = c(45,80),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,20,22)]+1.5,
sum_col_psi[c(2,9,12,18,19,20,22)],
yrlbls[c(2,9,12,18,19,20,22)],col='grey50') # Neutral
text(win_col_psi[c(3,15)]+1.5,
sum_col_psi[c(3,15)],
yrlbls[c(3,15)],col='orangered') #El Nino
# text(win_col_psi[c(21)]-1.5,
#      sum_col_psi[c(21)],
#      yrlbls[c(21)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)]+1.5,
sum_col_psi[c(1,8,10)],
yrlbls[c(1,8,10)],col='orange') # Warm years
# text(win_col_psi[c(20)]+1.5,
#      sum_col_psi[c(20)],
#      yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,14,21)]+0.5,
sum_col_psi[c(6,7,11,14,21)]-1,
yrlbls[c(6,7,11,14,21)],col='skyblue2') # cool years
text(win_col_psi[c(17)]-1,
sum_col_psi[c(17)]+1,
yrlbls[c(17)],col='skyblue2') # cool years, pt. 2 -> 2012
text(win_col_psi[c(23)]+1,
sum_col_psi[c(23)]+1,
yrlbls[c(23)],col='skyblue2') # cool years, pt. 3 -> 2020
text(win_col_psi[c(5,13,16)],
sum_col_psi[c(5,13,16)]-1,
yrlbls[c(5,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(4)]-1.5,
sum_col_psi[c(4)],
yrlbls[c(4)],col='royalblue3') # La NiÃ±a
# Test for a linear model
scttr5b = lm(sum_col_psi ~ win_col_psi)
abline(scttr5b)
#########
# FIG. 5B:
dev.new()
par(pty='s')
plot(win_col_psi,sum_col_psi,xlim=c(45,70),ylim = c(45,80),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,20,22)]+1.5,
sum_col_psi[c(2,9,12,18,19,20,22)],
yrlbls[c(2,9,12,18,19,20,22)],col='grey50') # Neutral
text(win_col_psi[c(3,15)]+1.5,
sum_col_psi[c(3,15)],
yrlbls[c(3,15)],col='orangered') #El Nino
# text(win_col_psi[c(21)]-1.5,
#      sum_col_psi[c(21)],
#      yrlbls[c(21)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)]+1.5,
sum_col_psi[c(1,8,10)],
yrlbls[c(1,8,10)],col='orange') # Warm years
# text(win_col_psi[c(20)]+1.5,
#      sum_col_psi[c(20)],
#      yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,14,21)]+0.5,
sum_col_psi[c(6,7,11,14,21)]-1,
yrlbls[c(6,7,11,14,21)],col='skyblue2') # cool years
text(win_col_psi[c(17)]-1,
sum_col_psi[c(17)]+1,
yrlbls[c(17)],col='skyblue2') # cool years, pt. 2 -> 2012
text(win_col_psi[c(23)]+1,
sum_col_psi[c(23)]+1,
yrlbls[c(23)],col='skyblue2') # cool years, pt. 3 -> 2020
text(win_col_psi[c(5,13,16)],
sum_col_psi[c(5,13,16)]-1,
yrlbls[c(5,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(4)]-1.5,
sum_col_psi[c(4)],
yrlbls[c(4)],col='royalblue3') # La NiÃ±a
# Test for a linear model
scttr5b = lm(sum_col_psi ~ win_col_psi)
abline(scttr5b)
# ## OPTION 2: WITH 2015, 2016 (on x-axis)
dev.new()
par(pty='s')
plot(win_col_psi,bstyrdy_plt,xlim=c(45,70),ylim=c(50,250),type='p',pch=16)
# Add year-labels - color-coded
text(win_col_psi[c(2,9,12,18,19,20,22)],
bstyrdy_plt[c(2,9,12,18,19,20,22)]+7,
yrlbls[c(2,9,12,18,19,20,22)],col='grey50') # Neutral
text(win_col_psi[c(3,15)],
bstyrdy_plt[c(3,15)]+7,
yrlbls[c(3,15)],col='orangered') #El Nino
# text(win_col_psi[c(21)]+1,
#      bstyrdy_plt[c(21)]-7,
#      yrlbls[c(21)],col='orangered') # El Nino, pt. 2 -> Label 2016 BELOW
text(win_col_psi[c(1,8,10)],
bstyrdy_plt[c(1,8,10)]+7,
yrlbls[c(1,8,10)],col='orange') # Warm years
# text(win_col_psi[c(20)]-1,
#      bstyrdy_plt[c(20)]-7,
#      yrlbls[c(20)],col='orange') # Warm years, pt. 2 -> Label 2015 BELOW
text(win_col_psi[c(6,7,11,17,21,23)],
bstyrdy_plt[c(6,7,11,17,21,23)]+7,
yrlbls[c(6,7,11,17,21,23)],col='skyblue2') # cool years
text(win_col_psi[c(14)]-1.5,
bstyrdy_plt[c(14)],
yrlbls[c(14)],col='skyblue2') # cool years, pt. 2
text(win_col_psi[c(4,13,16)],
bstyrdy_plt[c(4,13,16)]+7,
yrlbls[c(4,13,16)],col='royalblue3') # La NiÃ±a
text(win_col_psi[c(5)]-1.5,
bstyrdy_plt[c(5)],
yrlbls[c(5)],col='royalblue3') # La Nina, pt. 2
# Test for a linear model
scttr5a = lm(bstyrdy_plt ~ win_col_psi)
abline(scttr5a)
library(lubridate)
# ### Input copepod species file
copeflin <- read.csv('NH05_CopeDens_log_subSpp_1996_2020.csv')
copefl <- cbind(copeflin[,1:4],(10^(copeflin[,5:ncol(copeflin)]-1))-0.1)
head(copefl)
######### Part 1: Set up 24-week timeseries (biweekly) #########
### Step 1: Check each month-day and re-categorize
# into new vector as 1 or 16
dy2 <- vector()
for(d in 1:length(copefl$Day)){
if (copefl[d,2] %in% seq(1,15)){
d2 = 1
} else if (copefl[d,2] %in% seq(16,31)){
d2 = 16
}
dy2 = rbind(dy2,d2)
}
# Add 'Dy2' column next to 'Day'
copetbl <- cbind(copefl[,3],copefl[,1:2],dy2,copefl[,5:ncol(copefl)]) # dataframe w/ extra col: 'Day' = 1 or 16
colnames(copetbl[,1:2]) <- c("Year","Mon")
copedtsnew <- as.Date(with(copetbl,paste(copetbl[,1],copetbl$Mon,copetbl$dy2,sep="-")),"%Y-%m-%d")
copes_nodts <- data.frame(copetbl[5:ncol(copetbl)]) # dataframe w/ NO dates
### Step 1.2: Average across all repeat samples for each date
copedtunq <- unique(copedtsnew)
copeunq <- data.frame()
for(dl in 1:length(copedtunq)){
uids = which(copedtsnew %in% copedtunq[dl])
dtavg = colMeans(copes_nodts[uids,],na.rm=TRUE)
copeunq = rbind(copeunq,dtavg)
}
copeallunq <- data.frame(copedtunq,copeunq)
names(copeallunq) <- c("Date",colnames(copes_nodts))
### Step 1.3: Create timeseries of biweekly values for *every* month
yrsunq <- unique(copefl$Year)
dymstrall <- rep(c(1,16),(copetbl[nrow(copetbl),4]-copetbl[1,4]+1)*12) # Sequence of Days: 1, 16, 1, 16, etc.
momstr <- rep(seq(1,12,1),(yrsunq[length(yrsunq)]-yrsunq[1]+1))
momstrall <- rep(momstr,each=2) # Sequence of Months, repeated 2x each: 5,5,6,6,etc.
yrmstrall <- rep(seq(yrsunq[1],yrsunq[length(yrsunq)],1),each=24)
# Combine columns into dataframe
dtcmb <- data.frame(yrmstrall,momstrall,dymstrall)
# Convert columns -> "master" list of biweekly dates
dtmstr <- as.Date(with(dtcmb,paste(yrmstrall,momstrall,dymstrall,sep="-")),"%Y-%m-%d")
# Create empty data array to match DateMaster
mstrdata <- data.frame(matrix(nrow=length(dtmstr),ncol=ncol(copetbl)-4))
for(dn in 1:nrow(copeallunq)){
midx = which(dtmstr %in% as.Date(copeallunq[dn,1],format="%y-%m-%d"))
mstrdata[midx,] = copeallunq[dn,2:ncol(copeallunq)]
}
names(mstrdata) = names(copeallunq[2:ncol(copeallunq)])
# ### Step 2: Convert all raw values -> proportions
sppsums <- rowSums(mstrdata,na.rm=TRUE)
propsmat <- mstrdata/sppsums
propsmat[is.na(propsmat)] <- 0
### Step 3: Get yearlong cutout of props
yrin <- readline(prompt = "Year to plot? (1996-2020)   ")
pltdts <- dtmstr[chnkidx]
### Step 3: Get yearlong cutout of props
yrin <- readline(prompt = "Year to plot? (1996-2020)   ")
chnkidx <- which(format(dtmstr,format="%Y") %in% as.numeric(yrin))
pltdts <- dtmstr[chnkidx]
chnkmat <- propsmat[chnkidx,]
# ### Change all NA values -> zero
chnkzros <- chnkmat
chnkzros[is.na(chnkzros)] <- 0
chnktrns <- t(chnkzros)
## Step 4 - Plot proportions
# ### Define color set and plot proportions
colprps <- c("cyan","green2","yellow3","magenta","grey","navyblue","wheat","lavender","white",
"tomato1","blue2","green4","lemonchiffon","red","peachpuff","saddlebrown","grey70",
"blue4","olivedrab1","orange3","darkgreen","red1","springgreen2","bisque2","thistle3",
"salmon2","royalblue3","plum2","mistyrose","orange1","saddlebrown",
"skyblue1","red4","black","yellow1","plum4")
dev.new(width=8,height=20)
par(mar=c(6.5,5,3,4))
dim(chnktrns)
chnktrns
head(dtmstr)
head(propsmat)
head(mstrdata)
dim(mstrdata)
mstrdata[100:150,]
dim(copefl)
>>>>>>> master
